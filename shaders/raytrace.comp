#version 460 core

#define FLT_MAX 3.402823466e+38

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct bvhNode_t {
	vec4 pos, size;
	//uint children[2];
	//uint nodeType;
	uint triStart;
	uint numTris;
};

struct hitData_t {
	vec2 uv;
	float z;
	uint tri;
};

layout(std430, push_constant) uniform constants {
	uint bvhLen;
};

layout(std430, binding = 0) buffer vtxBuf {
	vec4 vtx[];
};

layout(std430, binding = 1) buffer idxBuf {
	uint idx[];
};

layout(std430, binding = 2) buffer bvhBuf {
	bvhNode_t bvh[];
};

layout(std430, binding = 3) buffer bvhTriBuf {
	uint bvhTris[];
};

layout(std430, binding = 4) buffer rayBuf {
	vec4 rays[][2];
};

layout(std430, binding = 5) buffer hitBuf {
	hitData_t hits[];
};

vec3 intersectTri( vec3 origin, vec3 dir, vec3 v0, vec3 v1, vec3 v2 ) {
	vec3 v10 = v1 - v0;
	vec3 v20 = v2 - v0;
	vec3 rov0 = origin - v0;
	vec3 n = cross( v10, v20 );
	vec3 q = cross( rov0, dir );
	float d = 1.0f / dot( dir, n );
	float u = d * dot( -q, v20 );
	float v = d * dot( q, v10 );
	float t = d * dot( -n, rov0 );
	if( u < 0.0f || u > 1.0f || v < 0.0f || ( u + v ) > 1.0f ) {
		t = -1.0f;
	}
	return vec3( t, u, v );
}

vec2 intersectBox( vec3 origin, vec3 dir, vec3 boxPos, vec3 boxSize ) {//, vec3* normal ) {
	vec3 roo = ( origin - boxPos );
	vec3 rdd = dir;
	vec3 m = 1.0f / rdd;
	vec3 n = m * roo;
	vec3 k = abs( m ) * boxSize;
	vec3 t1 = -n - k;
	vec3 t2 = -n + k;
	float tN = max( max( t1.x, t1.y ), t1.z );
	float tF = min( min( t2.x, t2.y ), t2.z );
	if( tN > tF || tF < 0.0f ) {
		return vec2( -1.0f, -1.0f );
	}
	//*normal = -vsign( rdd ) * vstep( t1.yzx, t1.xyz ) * vstep( t1.zxy, t1.xyz );
	return vec2( tN, tF );
}

void main() {
	uint r = gl_GlobalInvocationID.x;
	
	vec3 rayOrigin = rays[r][0].xyz;
	vec3 rayDir = rays[r][1].xyz;
	
	float minZ = FLT_MAX;
	vec2 hitUV;
	uint hitTri;
	
	for( uint i = 0; i < bvhLen; i++ ) {
		vec2 z2 = intersectBox( rayOrigin, rayDir, bvh[i].pos.xyz, bvh[i].size.xyz );
		
		if( z2[1] >= 0 && z2[0] < minZ ) {
			for( uint j = 0; j < bvh[i].numTris; j++ ) {
				uint t = bvhTris[bvh[i].triStart + j];
				
				uint i0 = idx[t*3+0];
				uint i1 = idx[t*3+1];
				uint i2 = idx[t*3+2];
				
				vec3 v0 = vtx[i0].xyz;
				vec3 v1 = vtx[i1].xyz;
				vec3 v2 = vtx[i2].xyz;
				
				vec3 hit = intersectTri( rayOrigin, rayDir, v0, v1, v2 );
				
				float z = hit.x;
				vec2 uv = hit.yz;
				
				if( z >= 0 && z < minZ ) {
					minZ = z;
					hitUV = uv;
					hitTri = t;
				}
			}
		}
	}
	
	hits[r].uv = hitUV;
	hits[r].z = minZ;
	hits[r].tri = hitTri;
}
