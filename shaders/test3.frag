#version 450 core

#extension GL_KHR_shader_subgroup_basic : require

layout(location = 0) in vec2 uv;

layout(location = 0) out vec4 colour;

layout(set = 0, binding = 0) uniform texture2D tex;
layout(set = 0, binding = 1) uniform texture2D depthTex;
layout(set = 0, binding = 2) uniform sampler s;

vec2 dofDither[256] = {
    vec2(  0.594933,  0.010690 ),
    vec2(  0.405282,  0.910454 ),
    vec2( -0.351067, -0.514121 ),
    vec2( -0.466174,  0.771646 ),
    vec2( -0.017710, -0.988999 ),
    vec2(  0.304808,  0.906269 ),
    vec2( -0.152270, -0.848611 ),
    vec2( -0.811615,  0.317129 ),
    vec2(  0.438905, -0.450215 ),
    vec2(  0.269964,  0.913689 ),
    vec2(  0.861502, -0.359217 ),
    vec2(  0.225336,  0.574607 ),
    vec2( -0.590480, -0.495326 ),
    vec2( -0.341458,  0.595830 ),
    vec2(  0.825838, -0.436146 ),
    vec2(  0.677329,  0.400689 ),
    vec2(  0.892436,  0.073613 ),
    vec2(  0.800707,  0.309994 ),
    vec2( -0.066044, -0.021019 ),
    vec2( -0.141862,  0.674076 ),
    vec2(  0.767917,  0.268699 ),
    vec2(  0.002057, -0.114069 ),
    vec2(  0.454682,  0.054496 ),
    vec2( -0.982629,  0.089293 ),
    vec2(  0.797761,  0.379538 ),
    vec2( -0.491608,  0.652757 ),
    vec2( -0.920443, -0.312987 ),
    vec2(  0.009889, -0.997206 ),
    vec2(  0.042590, -0.998857 ),
    vec2(  0.168669, -0.735771 ),
    vec2( -0.212210, -0.792659 ),
    vec2(  0.691060,  0.722782 ),
    vec2( -0.607964, -0.257140 ),
    vec2( -0.236870, -0.155210 ),
    vec2( -0.989082,  0.085708 ),
    vec2( -0.036397,  0.271516 ),
    vec2( -0.671825,  0.730753 ),
    vec2( -0.165417, -0.669414 ),
    vec2( -0.598089, -0.626053 ),
    vec2(  0.271790,  0.326241 ),
    vec2( -0.997019,  0.013025 ),
    vec2(  0.361813, -0.821453 ),
    vec2( -0.526840, -0.277688 ),
    vec2( -0.143405,  0.662846 ),
    vec2( -0.461572, -0.295321 ),
    vec2( -0.997111, -0.070696 ),
    vec2( -0.019081, -0.994441 ),
    vec2(  0.302085,  0.514360 ),
    vec2( -0.300039, -0.582851 ),
    vec2( -0.610084, -0.769771 ),
    vec2( -0.234683, -0.389239 ),
    vec2( -0.548681,  0.539604 ),
    vec2( -0.137751,  0.593634 ),
    vec2(  0.996286,  0.041357 ),
    vec2(  0.560739,  0.706639 ),
    vec2(  0.012204,  0.728348 ),
    vec2( -0.167648, -0.146618 ),
    vec2(  0.053687, -0.353280 ),
    vec2( -0.388824,  0.596113 ),
    vec2( -0.316440,  0.877102 ),
    vec2(  0.532684, -0.180481 ),
    vec2(  0.616855,  0.712706 ),
    vec2(  0.341608,  0.728802 ),
    vec2( -0.563613,  0.266388 ),
    vec2(  0.547157, -0.686453 ),
    vec2(  0.527890, -0.642202 ),
    vec2( -0.965380,  0.030867 ),
    vec2( -0.506262,  0.576016 ),
    vec2( -0.715010,  0.572146 ),
    vec2(  0.158635, -0.033182 ),
    vec2( -0.588696, -0.245275 ),
    vec2( -0.946272,  0.052429 ),
    vec2(  0.273958,  0.337094 ),
    vec2( -0.630393, -0.573361 ),
    vec2(  0.958147, -0.029661 ),
    vec2(  0.692057, -0.691033 ),
    vec2( -0.595276,  0.039626 ),
    vec2(  0.491296, -0.850620 ),
    vec2( -0.395265,  0.633230 ),
    vec2(  0.291678, -0.205830 ),
    vec2(  0.383604, -0.153034 ),
    vec2( -0.819096,  0.070627 ),
    vec2( -0.439316, -0.715846 ),
    vec2(  0.070247, -0.367563 ),
    vec2(  0.305755,  0.815145 ),
    vec2(  0.020316, -0.530542 ),
    vec2(  0.016984, -0.007352 ),
    vec2(  0.504319, -0.064589 ),
    vec2( -0.031842,  0.958377 ),
    vec2(  0.054113, -0.430085 ),
    vec2( -0.642956,  0.180200 ),
    vec2( -0.066060,  0.009052 ),
    vec2( -0.935174, -0.296274 ),
    vec2(  0.091224,  0.416542 ),
    vec2( -0.576963, -0.217624 ),
    vec2(  0.029959,  0.165181 ),
    vec2(  0.842997, -0.507168 ),
    vec2( -0.488276,  0.598715 ),
    vec2( -0.115515,  0.382767 ),
    vec2(  0.220711, -0.816228 ),
    vec2(  0.029306,  0.745481 ),
    vec2(  0.217689,  0.400810 ),
    vec2(  0.717026, -0.327831 ),
    vec2(  0.020860,  0.119366 ),
    vec2(  0.214094,  0.627654 ),
    vec2( -0.178273,  0.813563 ),
    vec2( -0.052589,  0.593256 ),
    vec2( -0.931214, -0.333667 ),
    vec2( -0.081586, -0.121949 ),
    vec2( -0.559240, -0.746827 ),
    vec2( -0.238713, -0.756503 ),
    vec2( -0.995847, -0.052850 ),
    vec2(  0.017513, -0.998553 ),
    vec2( -0.052204, -0.996526 ),
    vec2(  0.451869, -0.892038 ),
    vec2( -0.738137, -0.132507 ),
    vec2( -0.118542, -0.137579 ),
    vec2( -0.320742, -0.947069 ),
    vec2(  0.007691, -0.999261 ),
    vec2( -0.681968,  0.212273 ),
    vec2(  0.630649,  0.045153 ),
    vec2( -0.447369,  0.049773 ),
    vec2( -0.368194,  0.080641 ),
    vec2( -0.203924, -0.690280 ),
    vec2(  0.829111,  0.241796 ),
    vec2( -0.164189, -0.565799 ),
    vec2(  0.842914, -0.112581 ),
    vec2( -0.635850,  0.343990 ),
    vec2( -0.019848,  0.842230 ),
    vec2(  0.081344, -0.952712 ),
    vec2( -0.732311,  0.010848 ),
    vec2(  0.044436, -0.341974 ),
    vec2( -0.370081,  0.693952 ),
    vec2( -0.284436,  0.008511 ),
    vec2( -0.982990, -0.054328 ),
    vec2( -0.982902, -0.171585 ),
    vec2(  0.547513, -0.600883 ),
    vec2( -0.077418,  0.918493 ),
    vec2( -0.996601, -0.080262 ),
    vec2( -0.459124, -0.609783 ),
    vec2( -0.721779, -0.501968 ),
    vec2( -0.305705, -0.743761 ),
    vec2( -0.179389, -0.188883 ),
    vec2(  0.211837,  0.462238 ),
    vec2( -0.405653,  0.017098 ),
    vec2(  0.673713, -0.024671 ),
    vec2(  0.387809, -0.632324 ),
    vec2( -0.253110,  0.095554 ),
    vec2( -0.616594,  0.467654 ),
    vec2(  0.906644, -0.253350 ),
    vec2( -0.137521,  0.598734 ),
    vec2( -0.315182,  0.646085 ),
    vec2( -0.719671, -0.677208 ),
    vec2(  0.803845, -0.556887 ),
    vec2( -0.770058,  0.151118 ),
    vec2(  0.293097, -0.401995 ),
    vec2(  0.534009,  0.222700 ),
    vec2(  0.067366,  0.428431 ),
    vec2(  0.225300, -0.474635 ),
    vec2( -0.535000, -0.239475 ),
    vec2( -0.588319, -0.041668 ),
    vec2( -0.676645,  0.343682 ),
    vec2(  0.178912,  0.923064 ),
    vec2(  0.116003,  0.538324 ),
    vec2(  0.019137,  0.886740 ),
    vec2(  0.111962,  0.939628 ),
    vec2(  0.700805, -0.017050 ),
    vec2(  0.205497,  0.492045 ),
    vec2( -0.372671,  0.870438 ),
    vec2(  0.786746,  0.373076 ),
    vec2( -0.413606, -0.647544 ),
    vec2( -0.173053,  0.833701 ),
    vec2(  0.725170,  0.114087 ),
    vec2( -0.405974,  0.730245 ),
    vec2( -0.536849, -0.097612 ),
    vec2(  0.957384,  0.128287 ),
    vec2(  0.927866,  0.244015 ),
    vec2(  0.661218, -0.729789 ),
    vec2(  0.754869, -0.569402 ),
    vec2(  0.336576,  0.895493 ),
    vec2(  0.616500,  0.580625 ),
    vec2(  0.837900,  0.512236 ),
    vec2( -0.010091, -0.323376 ),
    vec2( -0.444865,  0.851498 ),
    vec2(  0.515837,  0.048344 ),
    vec2( -0.288719, -0.252029 ),
    vec2(  0.817804, -0.144990 ),
    vec2(  0.502121, -0.003646 ),
    vec2(  0.013081,  0.342065 ),
    vec2( -0.029793, -0.882486 ),
    vec2(  0.679417, -0.171929 ),
    vec2(  0.071633,  0.723901 ),
    vec2( -0.537268, -0.490924 ),
    vec2( -0.613267,  0.789874 ),
    vec2( -0.221169,  0.921134 ),
    vec2( -0.000004, -0.999672 ),
    vec2(  0.617147, -0.009987 ),
    vec2( -0.513355, -0.648189 ),
    vec2( -0.263851, -0.285573 ),
    vec2( -0.092623,  0.340108 ),
    vec2(  0.010865, -0.602829 ),
    vec2( -0.106015,  0.280962 ),
    vec2( -0.930520, -0.210805 ),
    vec2( -0.049972, -0.997983 ),
    vec2( -0.724655,  0.046304 ),
    vec2(  0.782875, -0.541974 ),
    vec2( -0.432102,  0.635852 ),
    vec2(  0.073799,  0.773296 ),
    vec2(  0.409263,  0.182859 ),
    vec2( -0.006635, -0.999756 ),
    vec2(  0.389939,  0.356056 ),
    vec2( -0.124608,  0.397000 ),
    vec2( -0.200240, -0.193542 ),
    vec2( -0.372316, -0.057948 ),
    vec2(  0.129674, -0.981901 ),
    vec2( -0.899147,  0.025302 ),
    vec2( -0.392435,  0.403322 ),
    vec2(  0.328082, -0.685623 ),
    vec2( -0.119544, -0.707190 ),
    vec2( -0.429267,  0.573331 ),
    vec2( -0.441547, -0.368929 ),
    vec2( -0.262088, -0.084017 ),
    vec2( -0.010222,  0.379149 ),
    vec2( -0.086980, -0.909817 ),
    vec2( -0.625632,  0.155495 ),
    vec2( -0.092356,  0.009140 ),
    vec2(  0.605684,  0.341652 ),
    vec2( -0.261789,  0.965116 ),
    vec2( -0.268680, -0.590033 ),
    vec2( -0.805218,  0.457264 ),
    vec2(  0.223040,  0.548763 ),
    vec2( -0.282654, -0.182801 ),
    vec2( -0.296806, -0.495435 ),
    vec2( -0.965781,  0.159494 ),
    vec2( -0.059274,  0.268384 ),
    vec2( -0.513571,  0.365095 ),
    vec2( -0.388950,  0.523264 ),
    vec2( -0.408180, -0.559765 ),
    vec2(  0.603101,  0.464775 ),
    vec2(  0.023246, -0.999602 ),
    vec2( -0.455855, -0.857084 ),
    vec2( -0.549032, -0.809392 ),
    vec2( -0.017963, -0.654174 ),
    vec2( -0.739412,  0.188755 ),
    vec2(  0.258478, -0.119236 ),
    vec2( -0.368237,  0.139740 ),
    vec2(  0.546926,  0.162525 ),
    vec2( -0.479186, -0.085448 ),
    vec2( -0.861305,  0.508008 ),
    vec2(  0.279604,  0.260999 ),
    vec2( -0.346874,  0.062053 ),
    vec2( -0.793279,  0.448000 ),
    vec2( -0.791467,  0.395738 ),
    vec2(  0.882910, -0.226356 ),
    vec2( -0.982606,  0.127606 ),
    vec2( -0.074104,  0.502001 )
};

float linearDepth( float z ) {
	/*
	const float n = 0.1;
	const float f = 1000.0;
	const float c1 = f / n;
	const float c0 = 1.0 - c1;
	
	return 1.0 / ( c0 * z + c1 );
	*/
	const float n = 0.1;
	return ( n / z );
}

vec3 ACESFilm( vec3 x ) {
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return clamp( ( x * ( a * x + b ) ) / ( x * ( c * x + d ) + e ), 0.0, 1.0 );
}

uint mix32( uint x ) {
	x ^= x >> 16;
    x *= 0x85ebca6b;
    x ^= x >> 13;
    x *= 0xc2b2ae35;
    x ^= x >> 16;
    return x;
}

void main() {
	float z = texture( sampler2D( depthTex, s ), uv ).r;
	float d = linearDepth( z );
	
	//vec3 c = texture( sampler2D( tex, s ), uv ).rgb;
	
	const int samples = 8;
	const float dofStrength = 0.000005;
	const float dofFocus = 450.0;
	const float caStrength = 100.0;
	
	float blur = abs( d - dofFocus ) * dofStrength;
	blur = min( blur, 1.0 );
	
	vec3 c = vec3( 0 );
	for( int i = 0; i < samples; i++ ) {
		//int n = i + 1;
		//float r1 = rand( uv * n );
		//float r2 = rand( uv * ( n * 2 ) );
		
		//uint idx = ( uint( gl_FragCoord.y * 4 + gl_FragCoord.x ) * samples + i ) % 256;
		
		uint idx = 0;
		idx = mix32( idx + uint( gl_FragCoord.x ) );
		idx = mix32( idx + uint( gl_FragCoord.y ) );
		idx = mix32( idx + uint( i ) );
		idx %= 256;
		
		vec2 r = dofDither[idx];
		vec2 uv2 = uv + r * blur;
		
		float ca = ( length( uv2 - vec2( 0.5 ) ) - length( uv - vec2( 0.5 ) ) ) * caStrength;
		ca *= abs( ca );
		
		//float z2 = texture( depthTex, uv2 ).r;
		//float d2 = linearDepth( z2 );
		
		//colour += mix( texture( tex, uv2 ), vec4( 0.4 ), d2 );
		c += texture( sampler2D( tex, s ), uv2 ).rgb * max( vec3( 1.0 + ca, 1.0 - abs( ca ) * 0.5, 1.0 - ca ), vec3( 0.0 ) );
		//c += max( vec3( 1.0 + ca, 1.0, 1.0 - ca ), vec3( 0.0 ) ) * ( ( uint( uv2.x * 12 ) + uint( uv2.y * 8 ) ) % 2 );
	}
	c /= samples;
	
	//colour = mix( colour, vec4( 0.4 ), d );
	/*
	float z = texture( depthTex, uv ).r;
	
	const int samples = 64;
	
	float ao = 0;
	for( int i = 0; i < samples; i++ ) {
		int n = i + 1;
		vec2 uv2 = uv + ( vec2( rand( uv * n ), rand( uv * ( n * 2 ) ) ) - 0.5 ) * 0.02;
		
		float z2 = texture( depthTex, uv2 ).r;
		
		ao += float( z2 < z );
	}
	
	ao = 1.0 - ao / samples;
	ao = min( ao * 2.2, 1.0 );
	
	colour = vec4( ao );
	*/
	
	c = ACESFilm( c );
	
	colour = vec4( c, 1 );
}
